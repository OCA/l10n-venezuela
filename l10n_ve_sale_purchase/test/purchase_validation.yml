-
  3. Purchase validation
-
  3.1 Find the purchase and check it is in draft state for total validation
-
  !python {model: purchase.order}: |
    po = self.browse(cr, uid, ref("purchase_order01"))
    assert po.invoice_ids[0].state == 'open', 'Invoice must be in draft state'
    am_obj=self.pool.get('account.move')
    am_ids = am_obj.search(cr, uid, [('name', '=', po.invoice_ids[0].number) ])
    assert am_ids, 'account.move was not created properly'
    am_brw = am_obj.browse(cr, uid, am_ids[0])
    d = 0
    c = 0
    for l in am_brw.line_id:
      d += l.debit
      c += l.credit
    assert c == d, 'Don\'t match'
-
  3.2 Validate stock picking
-
  !python {model: stock.picking}: |
    from openerp import netsvc
    po_obj=self.pool.get('purchase.order')
    po = po_obj.browse(cr, uid, ref("purchase_order01"))
    sp_ids = self.search(cr, uid, [('origin', '=', po.invoice_ids[0].name) ])
    assert sp_ids, 'Stock picking not created'
    wf_service = netsvc.LocalService("workflow")
    wf_service.trg_validate(uid, 'stock.picking',sp_ids[0],'button_done', cr)
    sp_brw = self.browse(cr, uid, sp_ids[0])
    assert sp_brw.state=='done', 'Workflow didn\'t work properly'
-
  3.3 Validate stock moves
-
  !python {model: stock.move}: |
    po_obj=self.pool.get('purchase.order')
    po = po_obj.browse(cr, uid, ref("purchase_order01"))
    sm_ids = self.search(cr, uid, [('origin', '=', po.invoice_ids[0].name) ])
    assert sm_ids, 'Stock moves not created'
    for sm_id in sm_ids:
      sm_brw = self.browse(cr, uid, sm_id)
      assert sm_brw.state=='done', 'Workflow didn\'t work properly'
-
  3.4 I validate invoice has same products that purchase order
-
  !python {model: purchase.order}: |
    po_brw = self.browse(cr, uid, ref("purchase_order01"))
    a = [int(l.product_id.id) for l in po_brw.order_line]
    b = [int(l.product_id.id) for l in po_brw.invoice_ids[0].invoice_line]
    assert a == b, 'Order and invoice does not contain same products'
-
  3.5 Check if invoice has same wh than purchase order
-
  !python {model: purchase.order}: |
    import logging
    logger = logging.getLogger('purchase.order')
    po_brw = self.browse(cr, uid, ref("purchase_order01"))
    assert po_brw.invoice_ids, 'Invoice was not created'
    whc1 = []
    for line in po_brw.invoice_ids[0].invoice_line:
      whc1.append(line.concept_id.id)

    whc2 = []
    for line in po_brw.order_line:
      whc2.append(line.concept_id.id)

    whc1 = set(whc1)
    whc2 = set(whc2)
    logger.warning(whc1)
    logger.warning(whc2)
    assert whc1 == whc2, 'Both invoices has not the same wh concepts po: %s invoice: %s'%(str(whc2), str(whc1))
