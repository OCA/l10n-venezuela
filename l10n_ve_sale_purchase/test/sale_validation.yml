-
  Find the sale and check it is in draft state for total validation
-
  !python {model: sale.order}: |
    po = self.browse(cr, uid, ref("sp_sale_order01"))
    assert po.invoice_ids[0].state == 'open', 'Order must be in draft state'
    am_obj=self.pool.get('account.move')
    am_ids = am_obj.search(cr, uid, [('name', '=', po.invoice_ids[0].number) ])
    assert am_ids, 'account.move was not created properly'
    am_brw = am_obj.browse(cr, uid, am_ids[0])
    d = 0
    c = 0
    for l in am_brw.line_id:
      d += l.debit
      c += l.credit
    assert c == d, 'Don\'t match'
-
  I validate invoice has same products that sale order
-
  !python {model: sale.order}: |
    po_brw = self.browse(cr, uid, ref("sp_sale_order01"))
    a = [int(l.product_id.id) for l in po_brw.order_line]
    b = [int(l.product_id.id) for l in po_brw.invoice_ids[0].invoice_line]
    assert a == b, 'Order and invoice does not contain same products'
-
  Check if invoice has same wh than sale order
-
  !python {model: sale.order}: |
    po_brw = self.browse(cr, uid, ref("sp_sale_order01"))
    assert po_brw.invoice_ids, 'Invoice was not created'
    whc1 = []
    for line in po_brw.invoice_ids[0].invoice_line:
      whc1.append(line.concept_id)

    whc2 = []
    for line in po_brw.order_line:
      whc2.append(line.concept_id)

    whc1 = set(whc1)
    whc2 = set(whc2)
    assert whc1 == whc2, 'Both invoices has not the same wh concepts'
