-
  5. Testing the correct use of sequence when generating supplier withholding documents.
-
  5.1 I check the records i will use in this test and configure enviroment options.
-
  I check that the supplier withholding sequence code in data is loaded.
-
    !assert {model: ir.sequence.type, id: seq_type_account_wh_iva_purchase, string: The purchase awi sequence code was not correctly loaded}:
        - code == 'account.wh.iva.in_invoice'
        - name == 'Purchase Vat Withholding'
-
  I check that the supplier withholding sequence in demo was loaded.
-
    !assert {model: ir.sequence, id: seq_account_wh_iva_purchase, string: The purchase sequence was not correctly loaded}:
        - name == 'Purchase Vat Withholding'
        - code == 'account.wh.iva.in_invoice'
        - prefix == '%(year)s-%(month)s-'
        - padding == 8
        - number_increment == 1
-
  I update the supplier withholding sequence in demo to later be able to difference it and the check that have been correctly used.
-
    !record {model: ir.sequence, id: seq_account_wh_iva_purchase}:
        prefix: PURCHASE_TEST-%(year)s-%(month)s-
        number_next: 999 
-
  I configure the context for purchase operations.
-
    !context
        'type': 'in_invoice'
-
  I set the company as a withholding agent (because is the only I can create a supplier withholdings).
-
    !record {model: res.partner, id: base.main_partner}:
        wh_iva_agent: True
-
  I check that the company is withholding agent.
-
    !assert {model: res.partner, id: base.main_partner, string: The Company is not a withholding agent}:
        - wh_iva_agent
-
  I check that the supplier that will be use exist.
-
    !assert {model: res.partner, id: l10n_ve_fiscal_requirements.f_req_partner_1, string: The supplier used in this test exist}:
        - id
-
  I check that tax the that will be use is a withholding tax.
-
    !assert {model: account.tax, id: l10n_ve_fiscal_requirements.iva_purchase1, string: The tax is not withholdeable}:
        - ret
-
  I check that the account that will be use is of payable type.
-
    !assert {model: account.account, id: account.a_pay, string: The account is not of payable type}:
        - type == 'payable'
-
  5.2 Check that the sequence is set only when the supplier withholding is set to done.
-
  I create a supplier invoice.
-
    !record {model: account.invoice, id: supplier_seq_invoice_1, view: account.invoice_supplier_form}: &supplier_seq_invoice
        nro_ctrl: PURCHASE-IVA-SEQ-INVOICE-0001
        supplier_invoice_number: PURCHASE-IVA-SEQ-INVOICE-0001
        partner_id: l10n_ve_fiscal_requirements.f_req_partner_1
        account_id: account.a_pay
        company_id: base.main_company
        currency_id: base.EUR
        reference_type: none
        invoice_line:
          - product_id: product.product_product_4
            quantity: 3
            uos_id: product.product_uom_unit
            price_unit: 3
            account_id: account.a_pay
            invoice_line_tax_id:
            - l10n_ve_fiscal_requirements.iva_purchase1
-
  I check the invoice type, state and have not wh doc.
-
    !assert {model: account.invoice, id: supplier_seq_invoice_1, string: The invoice was not correctly created. It need to be set in draft state, a supplier invoice type (in_invoice) and have not withholding document associaded.}:
        - state == 'draft'
        - type == 'in_invoice'
        - not wh_iva_id
-
  I confirm the invoice to create the withholding document.
-
  !workflow {model: account.invoice, action: invoice_open, ref: supplier_seq_invoice_1}
-
  I check that the invoice is confirmed and it generate a withholding doc.
-
    !assert {model: account.invoice, id: supplier_seq_invoice_1, string: The invoice was not correctly confirm. It need to change to open state (confirmed) and also generate and link a withholding document}:
        - state == 'open'
        - wh_iva_id
-
  I check that the withholding document state is draft and that the number field is unset.
-
    !assert {model: account.invoice, id: supplier_seq_invoice_1, string: When creating a supplier withholding via supplier invoice confirmation the state of the withholding document must be draft, and the wh number is unset (they will be set when the withholding is confirmed)}:
        - wh_iva_id.state == 'draft'
        - not wh_iva_id.number
-
  I confirm the withholding document
-
    !python {model: account.invoice}: |
        import time
        inv_id = ref( 'supplier_seq_invoice_1' )
        inv_brw = self.browse(cr, uid, inv_id)
        awi_id = inv_brw.wh_iva_id.id

        # TODO: do not know why i have to set the dates here but I have to.
        awi_brw = inv_brw.wh_iva_id
        cr_date = time.strftime('%Y-%m-%d')
        awi_brw.write( {}.fromkeys(['date', 'date_ret'], cr_date))

        from openerp import workflow
        from openerp.osv import osv
        wf_service = workflow
        wf_service.trg_validate(uid, 'account.wh.iva', awi_id, 'wh_iva_confirmed', cr)
-
  I check the withholding is confirm and that the wh number is not set.
-
    !assert {model: account.invoice, id: supplier_seq_invoice_1, string: The withholding was not correctly confirm.}:
        - wh_iva_id.state == 'confirmed'
        - not wh_iva_id.number
-
  I set the withholding to done state.
-
    !python {model: account.invoice}: |
        inv_id = ref( 'supplier_seq_invoice_1' )
        inv_brw = self.browse(cr, uid, inv_id)
        awi_id = inv_brw.wh_iva_id.id
        from openerp import workflow
        from openerp.osv import osv
        wf_service = workflow
        wf_service.trg_validate(uid, 'account.wh.iva', awi_id, 'wh_iva_done', cr)
-
  I check the withholding is done and that the wh number is set.
-
    !assert {model: account.invoice, id: supplier_seq_invoice_1, string: The withholding was not correctly done.}:
        - wh_iva_id.state == 'done'
        - wh_iva_id.number
-
  5.3 Using the supplier withholding document generated in 5.2 I check if the
  sequence used is the correct one (purchase sequence in this case).
-
    !python {model: account.invoice}: |
        inv_id = ref( 'supplier_seq_invoice_1' )
        awi_brw = self.browse(cr, uid, inv_id).wh_iva_id
        assert 'PURCHASE_TEST' in awi_brw.number, 'There was not used the supplier withholding sequence of the demo data. The sequence by type of withholding document is badly used.'
-
  5.4 I check that the supplier withholding sequence is used consecutively.
-
  I create a supplier invoice.
-
    !record {model: account.invoice, id: supplier_seq_invoice_2, view: account.invoice_supplier_form}:
        nro_ctrl: PURCHASE-IVA-SEQ-INVOICE-0002
        supplier_invoice_number: PURCHASE-IVA-SEQ-INVOICE-0002
        << :  *supplier_seq_invoice
-
  I check the invoice type, state and have not wh doc.
-
    !assert {model: account.invoice, id: supplier_seq_invoice_2, string: The invoice was not correctly created. It need to be set in draft state, a supplier invoice type (in_invoice) and have not withholding document associaded.}:
        - state == 'draft'
        - type == 'in_invoice'
        - not wh_iva_id
-
  I confirm the invoice to create the withholding document.
-
  !workflow {model: account.invoice, action: invoice_open, ref: supplier_seq_invoice_2}
-
  I check that the invoice is confirmed and it generate a withholding doc.
-
    !assert {model: account.invoice, id: supplier_seq_invoice_2, string: The invoice was not correctly confirm. It need to change to open state (confirmed) and also generate and link a withholding document}:
        - state == 'open'
        - wh_iva_id
-
  I check that the withholding document state is draft and that the number field is unset.
-
    !assert {model: account.invoice, id: supplier_seq_invoice_2, string: When creating a supplier withholding via supplier invoice confirmation the state of the withholding document must be draft, and the wh number is unset (they will be set when the withholding is confirmed)}:
        - wh_iva_id.state == 'draft'
        - not wh_iva_id.number
-
  I confirm the withholding document
-
    !python {model: account.invoice}: |
        import time
        inv_id = ref( 'supplier_seq_invoice_2' )
        inv_brw = self.browse(cr, uid, inv_id)
        awi_id = inv_brw.wh_iva_id.id

        # TODO: do not know why i have to set the dates here but I have to.
        awi_brw = inv_brw.wh_iva_id
        cr_date = time.strftime('%Y-%m-%d')
        awi_brw.write( {}.fromkeys(['date', 'date_ret'], cr_date))

        from openerp import workflow
        from openerp.osv import osv
        wf_service = workflow
        wf_service.trg_validate(uid, 'account.wh.iva', awi_id, 'wh_iva_confirmed', cr)
-
  I check the withholding is confirm and that the wh number is not set.
-
    !assert {model: account.invoice, id: supplier_seq_invoice_2, string: The withholding was not correctly confirm.}:
        - wh_iva_id.state == 'confirmed'
        - not wh_iva_id.number
-
  I change the withholding to done state.
-
    !python {model: account.invoice}: |
        inv_id = ref( 'supplier_seq_invoice_2' )
        inv_brw = self.browse(cr, uid, inv_id)
        awi_id = inv_brw.wh_iva_id.id
        from openerp import workflow
        from openerp.osv import osv
        wf_service = workflow
        wf_service.trg_validate(uid, 'account.wh.iva', awi_id, 'wh_iva_done', cr)
-
  I check the withholding is done and that the wh number is set.
-
    !assert {model: account.invoice, id: supplier_seq_invoice_2, string: The withholding was not correctly done.}:
        - wh_iva_id.state == 'done'
        - wh_iva_id.number
-
  I check that number associated to the new withholding is the consecutively one.
-
    !python {model: account.invoice}: |
        inv_id = ref( 'supplier_seq_invoice_2' )
        awi_brw = self.browse(cr, uid, inv_id).wh_iva_id
        assert 'PURCHASE_TEST' in awi_brw.number, 'There was not used the supplier withholding sequence of the demo data. The sequence by type of withholding document is badly used.'
        assert '00001000' in awi_brw.number, 'The withholding documents are no creating consecutively'
-
  5.5  Using the supplier withholding generated in 5.4 I check if I cancel it
  and then I re-used, the withholding number must remains and the sequence too.
  I use two invoices.
-
  I check that the last withholding sequence number was '0001000'
-
    !python {model: account.invoice}: |
        inv_id = ref( 'supplier_seq_invoice_2' )
        awi_brw = self.browse(cr, uid, inv_id).wh_iva_id
        assert '00001000' in awi_brw.number, 'The initial mark for this test is not correctly set, so it can continue'
-
  I update the invoice and withholding journals to be able to cancel entries.
-
    !python {model: account.invoice}: |
        inv_id = ref( 'supplier_seq_invoice_2' )
        journal_obj = self.pool.get( 'account.journal' )
        inv_brw = self.browse(cr, uid, inv_id)
        inv_journal_id = inv_brw.journal_id.id
        wh_journal_id = inv_brw.wh_iva_id.journal_id.id
        journal_obj.write(
            cr, uid, [inv_journal_id, wh_journal_id], {'update_posted': True})
-
  I create a supplier invoice.
-
    !record {model: account.invoice, id: supplier_seq_invoice_3, view: account.invoice_supplier_form}:
        nro_ctrl: PURCHASE-IVA-SEQ-INVOICE-0003
        supplier_invoice_number: PURCHASE-IVA-SEQ-INVOICE-0003
        <<:  *supplier_seq_invoice
-
  I check the invoice type, state and have not wh doc.
-
    !assert {model: account.invoice, id: supplier_seq_invoice_3, string: The invoice was not correctly created. It need to be set in draft state, a supplier invoice type (in_invoice) and have not withholding document associaded.}:
        - state == 'draft'
        - type == 'in_invoice'
        - not wh_iva_id
-
  I confirm the invoice to create the withholding document.
-
  !workflow {model: account.invoice, action: invoice_open, ref: supplier_seq_invoice_3}
-
  I check that the invoice is confirmed and it generate a withholding doc.
-
    !assert {model: account.invoice, id: supplier_seq_invoice_3, string: The invoice was not correctly confirm. It need to change to open state (confirmed) and also generate and link a withholding document}:
        - state == 'open'
        - wh_iva_id
-
  I confirm the withholding document
-
    !python {model: account.invoice}: |
        import time
        inv_id = ref( 'supplier_seq_invoice_3' )
        inv_brw = self.browse(cr, uid, inv_id)
        awi_id = inv_brw.wh_iva_id.id

        # TODO: do not know why i have to set the dates here but I have to.
        awi_brw = inv_brw.wh_iva_id
        cr_date = time.strftime('%Y-%m-%d')
        awi_brw.write( {}.fromkeys(['date', 'date_ret'], cr_date))

        from openerp import workflow
        from openerp.osv import osv
        wf_service = workflow
        wf_service.trg_validate(uid, 'account.wh.iva', awi_id, 'wh_iva_confirmed', cr)
-
  I check the withholding is confirm and that the wh number is not set.
-
    !assert {model: account.invoice, id: supplier_seq_invoice_3, string: The withholding was not correctly confirm.}:
        - wh_iva_id.state == 'confirmed'
        - not wh_iva_id.number
-
  I set the withholding to done state.
-
    !python {model: account.invoice}: |
        inv_id = ref( 'supplier_seq_invoice_3' )
        inv_brw = self.browse(cr, uid, inv_id)
        awi_id = inv_brw.wh_iva_id.id
        from openerp import workflow
        from openerp.osv import osv
        wf_service = workflow
        wf_service.trg_validate(uid, 'account.wh.iva', awi_id, 'wh_iva_done', cr)
-
  I check the withholding is done and that the wh number is set.
-
    !assert {model: account.invoice, id: supplier_seq_invoice_3, string: The withholding was not correctly done.}:
        - wh_iva_id.state == 'done'
        - wh_iva_id.number
-
  I check if the withholding number use the sequence the consecutive number
  00001001.
-
    !python {model: account.invoice}: |
        inv_id = ref( 'supplier_seq_invoice_3' )
        awi_brw = self.browse(cr, uid, inv_id).wh_iva_id
        assert '00001001' in awi_brw.number, 'The withholding documents are no creating consecutively ' + awi_brw.number
-
  I cancel the withholding document with sequence 00001001.
-
    !python {model: account.invoice}: |
        inv_id = ref( 'supplier_seq_invoice_3')
        inv_brw = self.browse(cr, uid, inv_id)
        awi_id = inv_brw.wh_iva_id.id
        from openerp import workflow
        from openerp.osv import osv
        wf_service = workflow
        wf_service.trg_validate(uid, 'account.wh.iva', awi_id, 'cancel', cr)
        awi_obj = self.pool.get('account.wh.iva')
        awi_brw = awi_obj.browse(cr, uid, awi_id)
        assert awi_brw.state == 'cancel', 'It does not change the withholding state to cancel'
-
  I cancel the withholding document with sequence 00001000, I set it to draft
  and add two invoices.
-
    !python {model: account.wh.iva}: |
        from openerp import workflow
        from openerp.osv import osv
        wf_service = workflow
        period_obj = self.pool.get('account.period')
        invoice_obj = self.pool.get('account.invoice')

        invoice_ids = [ref( 'supplier_seq_invoice_2'), ref( 'supplier_seq_invoice_3' )]
        awi_id = invoice_obj.browse(
            cr, uid, invoice_ids[0]).wh_iva_id.id
        wf_service.trg_validate(uid, 'account.wh.iva', awi_id, 'cancel', cr)

        awi_brw = self.browse(cr, uid, awi_id)
        assert awi_brw.state == 'cancel', 'It does not change the withholding state to cancel'
        assert not awi_brw.wh_lines, 'when a withholding document have been cancel then all its lines are clean'
        wf_service.trg_validate(uid, 'account.wh.iva', awi_id, 'set_to_draft', cr)

        awi_brw = self.browse(cr, uid, awi_id)
        assert awi_brw.state == 'draft', 'The withholding document was not reset to draft %s' % (awi_brw.state, )

        for invoice_brw in invoice_obj.browse(cr, uid, invoice_ids):
            period_id, fortnight = period_obj.find_fortnight(
                cr, uid, invoice_brw.date_invoice)
            values = self.onchange_partner_id(
                cr, uid, [awi_id], 'out_invoice', awi_brw.partner_id.id,
                period_id=period_id, fortnight=fortnight)
            values.update( 'wh_lines' ) = [
                (0, 0, item)
                for item in values.get( 'wh_lines' )]
        self.write(cr, uid, awi_id, values)
-
  I check that the withholding document sequence '00001000' state is draft and
  that the two invoices was added, and also that the withholding number
  remains.
-
    !assert {model: account.invoice, id: supplier_seq_invoice_2, string: )}:
        - wh_iva_id.state == 'draft'
        - wh_iva_id.wh_lines
        - wh_iva_id.number
-
  I check that the re used withholding sequence number remains '0001000'.
-
    !python {model: account.invoice}: |
        inv_id = ref( 'supplier_seq_invoice_2' )
        awi_brw = self.browse(cr, uid, inv_id).wh_iva_id
        assert '00001000' in awi_brw.number, 'The initial mark for this test is not correctly set, so it can continue'
-
  I compute the taxes manually with the button 'Compute Withholding Vat'.
-
    !function {model: account.wh.iva, name: compute_amount_wh}:
        - model: account.invoice
          eval: "[obj(ref('supplier_seq_invoice_2')).wh_iva_id.id]"
-
  I confirm the withholding document
-
    !python {model: account.invoice}: |
        import time
        inv_id = ref( 'supplier_seq_invoice_2' )
        inv_brw = self.browse(cr, uid, inv_id)
        awi_id = inv_brw.wh_iva_id.id

        # TODO: do not know why i have to set the dates here but I have to.
        awi_brw = inv_brw.wh_iva_id
        cr_date = time.strftime('%Y-%m-%d')
        awi_brw.write( {}.fromkeys(['date', 'date_ret'], cr_date))

        from openerp import workflow
        from openerp.osv import osv
        wf_service = workflow
        wf_service.trg_validate(uid, 'account.wh.iva', awi_id, 'wh_iva_confirmed', cr)
-
  I check the withholding is confirm and that the wh number is set.
-
    !assert {model: account.invoice, id: supplier_seq_invoice_2, string: The withholding was not correctly confirm.}:
        - wh_iva_id.state == 'confirmed'
        - wh_iva_id.number
-
  I check that the re used withholding sequence number remains '0001000'.
-
    !python {model: account.invoice}: |
        inv_id = ref( 'supplier_seq_invoice_2' )
        awi_brw = self.browse(cr, uid, inv_id).wh_iva_id
        assert '00001000' in awi_brw.number, 'The initial mark for this test is not correctly set, so it can continue'
-
  I set the withholding to done state.
-
    !python {model: account.invoice}: |
        inv_id = ref( 'supplier_seq_invoice_2' )
        inv_brw = self.browse(cr, uid, inv_id)
        awi_id = inv_brw.wh_iva_id.id
        from openerp import workflow
        from openerp.osv import osv
        wf_service = workflow
        wf_service.trg_validate(uid, 'account.wh.iva', awi_id, 'wh_iva_done', cr)
-
  I check the withholding is done and that the wh number is set.
-
    !assert {model: account.invoice, id: supplier_seq_invoice_2, string: The withholding was not correctly done.}:
        - wh_iva_id.state == 'done'
        - wh_iva_id.number
-
  I check that the re used withholding sequence number remains '0001000'.
-
    !python {model: account.invoice}: |
        inv_id = ref( 'supplier_seq_invoice_2' )
        awi_brw = self.browse(cr, uid, inv_id).wh_iva_id
        assert '00001000' in awi_brw.number, 'The initial mark for this test is not correctly set, so it can continue'
