-
  3. Fiscal requirements purchase tests
-
  I set the context that will be used for the encoding of all the invoices of this file
-
  !context
    'type': 'in_invoice'
-
  3.1 In order to test fiscal requirements I create a new customer purchase invoice with purchase tax 2
-
  !record {model: account.invoice, id: test_fr02}:
    account_id: account.a_pay
    company_id: base.main_company
    currency_id: base.EUR
    invoice_line:
      - product_id: product.product_product_4
        quantity: 3
        uos_id: product.product_uom_unit
        price_unit: 3
        name: Fiscal Requirements Purchase Invoice p1
        account_id: account.a_expense
        invoice_line_tax_id:
        - iva_purchase1
    journal_id: account.expenses_journal
    partner_id: base.res_partner_23
    reference_type: none
    nro_ctrl: 445122-SD
-
  3.2 I check that Initially customer invoice is in the "Draft" state
-
  !assert {model: account.invoice, id: test_fr02}:
    - state == 'draft'
-
  3.3 Click on reset taxes button & Check That there is a tax
-
  !python {model: account.invoice}: |
    self.button_reset_taxes(cr, uid, [ref("test_fr02")])
    inv_brw = self.browse(cr, uid, ref('test_fr01'))
    assert inv_brw.tax_line, 'There should be tax lines in this invoive'
-
  3.4 I change the state of invoice to "Proforma2" by clicking PRO-FORMA button
-
  !workflow {model: account.invoice, action: invoice_proforma2, ref: test_fr02}
-
  3.5 I check that the invoice state is now "Proforma2"
-
  !assert {model: account.invoice, id: test_fr02}:
    - state == 'proforma2'
-
  3.6 I check that the invoice state is not "Open"
-
  !assert {model: account.invoice, id: test_fr02, string: Invoice is not in open state}:
    - state != 'open'
